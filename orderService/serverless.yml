# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: greet
# "service" is the name of this project. This will also be added to your AWS resource names.
service: orderService

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-2
  environment:
    DYNAMO_TABLE: Orders # securely fetch from
    SQS_QUEUE_URL: https://sqs.us-east-2.amazonaws.com/010526250202/OrderQueue
    
  httpApi:
    authorizers:
      myCognitoAuth:
        type: jwt
        identitySource: $request.header.Authorization # The header where the JWT token will be passed
        issuerUrl: https://cognito-idp.us-east-2.amazonaws.com/us-east-2_NtwtZtOOx # Cognito user pool issuer URL
        audience:
          - 2sphqvjfjrqmnslps2oijq86k1 
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem # Allows the function to put items in the DynamoDB table
        - dynamodb:GetItem
        - dynamodb:UpdateItem # Allows the function to get and update items in the DynamoDB table
        - sqs:SendMessage # Allows the function to send messages to the SQS queue
        - sqs:ReceiveMessage # Allows the function to receive messages from the SQS queue
        - sqs:DeleteMessage # Allows the function to delete messages from the SQS queue
        - ses:SendEmail # Allows the function to send emails using Amazon SES
        - States:StartExecution
      Resource: 
        - Fn::GetAtt: [OrdersTable, Arn] # Allows access to the DynamoDB table
        - Fn::GetAtt: [OrderQueue, Arn] # Allows access to the DynamoDB table
        - arn:aws:states:us-east-2:010526250202:stateMachine:OrderProcessingStateMachine # Allows access to the Step Function state machine
        - arn:aws:ses:us-east-2:010526250202:identity/janindujm@gmail.com
        
    

resources:
  Resources:
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Orders
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH  
    
    OrderQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: OrderQueue

functions:
  placeOrder:
    handler: handlers/placeOrder.placeOrder
    environment:
      STEP_FUNCTION_ARN:
        Ref: OrderProcessingStateMachine # Reference to the Step Function ARN
    events:
      - httpApi:
          path: /create-order
          method: post
          authorizer: 
            name: myCognitoAuth # Use the custom authorizer defined above
          

  processOrder:
    handler: handlers/processOrder.processOrder
    events:
      - sqs:
          arn: arn:aws:sqs:us-east-2:010526250202:OrderQueue

  updateOrderStatus:
    handler: handlers/updateOrderStatus.updateOrderStatus

stepFunctions: #Start defining step function
  stateMachines: # Defines the state machine for order processing
    OrderProcessingStateMachine: # the name of the state machine
      name: OrderProcessingStateMachine # Name of the state machine
      definition: #Actual structure of the state machine
        Comment: "Order processing with status update"
        StartAt: UpdateStatusToProcessing # The first state to execute
        States:
          UpdateStatusToProcessing:
            Type: Task
            Resource:
              Fn::GetAtt: [UpdateOrderStatusLambdaFunction, Arn] # Reference to the Lambda function that updates the order status to "Processing"
            Next: NotifyUser 
          NotifyUser:
            Type: Pass 
            Result: "User notified"
            End: true # Marks the end of the state machine execution


